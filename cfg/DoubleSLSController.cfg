#!/usr/bin/env python
PACKAGE = "double_sls_controller"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

# gen.add("max_acc",    double_t,    0, "Max Feedback Acceleration", 7.0,  1.0, 8.0)
# gen.add("Kp_x",    double_t,    0, "Proportional gain for X position error", 8.0,  0.10, 20.0)
# gen.add("Kp_y", double_t, 0, "Proportional gain for Y position error", 8.0, 0.1, 20.0)
# gen.add("Kp_z", double_t, 0, "Proportional gain for Z position error", 10.0, 0.1, 20.0)
# gen.add("Kv_x",    double_t,    0, "Proportional gain for X velocity error", 1.5,  0.1, 20.0)
# gen.add("Kv_y", double_t, 0, "Proportional gain for Y velocity error", 1.5, 0.1, 20.0)
# gen.add("Kv_z", double_t, 0, "Proportional gain for Z velocity error", 3.3, 0.1, 20.0)

# Mission
gen.add("mission_enabled",    bool_t,     0,  "Switch of DEA Mission",  False)
# Inner-loop Parameters
gen.add("throttle_offset",  double_t,   0,  "Compensation for throttle command", 0.018, 0.0, 1.0) # default min max
gen.add("att_ctrl_tau", double_t, 0, "Time constant of the attitude controller", 0.8, 0.0, 5.0)
# DEA Controller - Booleans
gen.add("dea_enabled",    bool_t,     0,  "Switch of DEA Controller",  False)
gen.add("dea_preintegrate_enabled",    bool_t,     0,  "Switch of DEA Controller Integration",  False)
# DEA Controller - Reference
gen.add("radium_scalar", double_t, 0, "Multiplier of reference radium", 0.0, 0.0, 5.0)
gen.add("freq_scalar", double_t, 0, "Multiplier of reference freqeuncy", 0.0, 0.0, 5.0)
gen.add("radium_x", double_t, 0, "Radium in x coordinate", 1.0, 0.0, 5.0)
gen.add("radium_y", double_t, 0, "Radium in y coordinate", 1.0, 0.0, 5.0)
gen.add("radium_z", double_t, 0, "Radium in z coordinate", 0.0, 0.0, 5.0)
gen.add("freq_x", double_t, 0, "Frequnency in x coordinate", 1.0, 0.0, 5.0)
gen.add("freq_y", double_t, 0, "Frequnency in y coordinate", 1.0, 0.0, 5.0)
gen.add("freq_z", double_t, 0, "Frequnency in z coordinate", 0.0, 0.0, 5.0)
gen.add("ref_x", double_t, 0, "x coordiate of ref", 0.0, -5.0, 5.0)
gen.add("ref_y", double_t, 0, "y coordiate of ref", 0.0, -5.0, 5.0)
gen.add("ref_z", double_t, 0, "z coordiate of ref", -2.0, -5.0, 0.0)
gen.add("phi_x", double_t, 0, "x phase shift of ref", 0.0, -3.1415926535, 3.1415926535)
gen.add("phi_y", double_t, 0, "y phase shift of ref", 1.57079632675, -3.1415926535, 3.1415926535)
gen.add("phi_z", double_t, 0, "z phase shift of ref", 0.0, -3.1415926535, 3.1415926535)
gen.add("ref_q13", double_t, 0, "z phase shift of ref", 0.707106781186548, -1.0, 1.0)
gen.add("ref_q21", double_t, 0, "z phase shift of ref", 0.0, -1.0, 1.0)
gen.add("ref_q22", double_t, 0, "z phase shift of ref", -0.707106781186548, -1.0, 1.0)
# DEA Controller - Gains
gen.add("Kpos_x", double_t, 0, "Load Pose x gain", 31.6228, 0.0, 100.0)
gen.add("Kvel_x", double_t, 0, "Load Vel x gain", 37.4556, 0.0, 100.0)
gen.add("Kacc_x", double_t, 0, "Load Acc x gain", 20.6010, 0.0, 100.0)
gen.add("Kjer_x", double_t, 0, "Load jerk x gain", 6.4963, 0.0, 100.0)
gen.add("Kpos_y", double_t, 0, "Load Pose y gain", 31.6228, 0.0, 100.0)
gen.add("Kvel_y", double_t, 0, "Load Vel y gain", 37.4556, 0.0, 100.0)
gen.add("Kacc_y", double_t, 0, "Load Acc y gain", 20.6010, 0.0, 100.0)
gen.add("Kjer_y", double_t, 0, "Load jerk y gain", 6.4963, 0.0, 100.0)
gen.add("Kpos_z", double_t, 0, "Load Pose z gain", 24.0, 0.0, 100.0)
gen.add("Kvel_z", double_t, 0, "Load Vel z gain", 50.0, 0.0, 100.0)
gen.add("Kacc_z", double_t, 0, "Load Acc z gain", 35.0, 0.0, 100.0)
gen.add("Kjer_z", double_t, 0, "Load jerk z gain", 10.0, 0.0, 100.0)
gen.add("Kq13_1", double_t, 0, "q13 gain 1", 2.0, 0.0, 100.0)
gen.add("Kq13_2", double_t, 0, "q13 gain 2", 3.0, 0.0, 100.0)
gen.add("Kq21_1", double_t, 0, "q21 gain 1", 2.0, 0.0, 100.0)
gen.add("Kq21_2", double_t, 0, "q21 gain 2", 3.0, 0.0, 100.0)
gen.add("Kq22_1", double_t, 0, "q22 gain 1", 2.0, 0.0, 100.0)
gen.add("Kq22_2", double_t, 0, "q22 gain 2", 3.0, 0.0, 100.0)
# LPF
gen.add("lpf1_enabled", bool_t, 0,  "Switch of 1st order Low-Pass Filter",  False)
gen.add("lpf2_enabled", bool_t, 0,  "Switch of 2nd order Low-Pass Filter",  False)
gen.add("lpf_tau",   double_t, 0, "Time constant of 1st order LPF", 0.01, 0.0, 1.0)
gen.add("lpf_xi",    double_t, 0, "Damping ratio of 2nd order LPF", 0.7, 0.0, 1.0)
gen.add("lpf_omega", double_t, 0, "Natural frequency of 2nd order LPF", 100, 0.0, 100.0)

exit(gen.generate(PACKAGE, "double_sls_controller", "DoubleSLSController"))